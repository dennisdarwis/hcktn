{
  "_args": [
    [
      {
        "raw": "body-parser-xml@^1.1.0",
        "scope": null,
        "escapedName": "body-parser-xml",
        "name": "body-parser-xml",
        "rawSpec": "^1.1.0",
        "spec": ">=1.1.0 <2.0.0",
        "type": "range"
      },
      "/Users/dennisdarwis/hcktn"
    ]
  ],
  "_from": "body-parser-xml@>=1.1.0 <2.0.0",
  "_id": "body-parser-xml@1.1.0",
  "_inCache": true,
  "_location": "/body-parser-xml",
  "_nodeVersion": "4.4.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/body-parser-xml-1.1.0.tgz_1458308774288_0.8894852374214679"
  },
  "_npmUser": {
    "name": "fiznool",
    "email": "fiznool@gmail.com"
  },
  "_npmVersion": "3.8.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "body-parser-xml@^1.1.0",
    "scope": null,
    "escapedName": "body-parser-xml",
    "name": "body-parser-xml",
    "rawSpec": "^1.1.0",
    "spec": ">=1.1.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/body-parser-xml/-/body-parser-xml-1.1.0.tgz",
  "_shasum": "7b56bef1cd7d266c13602b4c1daf4f511d26447c",
  "_shrinkwrap": null,
  "_spec": "body-parser-xml@^1.1.0",
  "_where": "/Users/dennisdarwis/hcktn",
  "author": {
    "name": "Tom Spencer",
    "email": "fiznool@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/fiznool/body-parser-xml/issues"
  },
  "dependencies": {
    "xml2js": "^0.4.16"
  },
  "description": "XML parser middleware for express.js.",
  "devDependencies": {
    "body-parser": "^1.15.0",
    "express": "^4.13.4",
    "mocha": "^2.4.5",
    "supertest": "^1.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "7b56bef1cd7d266c13602b4c1daf4f511d26447c",
    "tarball": "https://registry.npmjs.org/body-parser-xml/-/body-parser-xml-1.1.0.tgz"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "gitHead": "3cf7784d6fae61d1d877da54ca56f31b2642975c",
  "homepage": "https://github.com/fiznool/body-parser-xml#readme",
  "keywords": [
    "express",
    "xml",
    "middleware",
    "body-parser"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "fiznool",
      "email": "fiznool@gmail.com"
    }
  ],
  "name": "body-parser-xml",
  "optionalDependencies": {},
  "readme": "# XML Body Parser\n\nAdds XML parsing to the [body-parser](https://github.com/expressjs/body-parser) library, so you can convert incoming XML data into a JSON representation.\n\nThis is really useful if you want to deal with plain old JavaScript objects, but you need to interface with XML APIs.\n\n[![Build Status](https://travis-ci.org/fiznool/body-parser-xml.svg?branch=master)](https://travis-ci.org/fiznool/body-parser-xml)\n[![npm version](https://badge.fury.io/js/body-parser-xml.svg)](http://badge.fury.io/js/body-parser-xml)\n[![Dependency Status](https://david-dm.org/fiznool/body-parser-xml.svg)](https://david-dm.org/fiznool/body-parser-xml)\n[![devDependency Status](https://david-dm.org/fiznool/body-parser-xml/dev-status.svg)](https://david-dm.org/fiznool/body-parser-xml#info=devDependencies)\n\n## Installation\n\n```\nnpm install --save express body-parser body-parser-xml\n```\n\n## Usage\n\nThis library adds an `xml` method to the `body-parser` object.\n\nInitialise like so:\n\n``` js\nvar bodyParser = require('body-parser');\nrequire('body-parser-xml')(bodyParser);\n```\n\nOnce initialised, you can use it just like any other `body-parser` middleware:\n\n``` js\nvar app = require('express')();\napp.use(bodyParser.xml());\n```\n\nThis will parse any XML-based request and place it as a JavaScript object on `req.body` for your route handlers to use.\n\nAn XML-based request is determined by the value of the `Content-Type` header. By default, any `Content-Type` header ending in `/xml` or `+xml` will be parsed as XML. For example, the following Content-Types will all match:\n\n- `text/xml`\n- `application/xml`\n- `application/rss+xml`\n\nIf you need to match against a custom `Content-Type` header, pass in the `type` to match as an option (see below).\n\n### Options\n\nYou can also pass in options:\n\n``` js\napp.use(bodyParser.xml(options));\n```\n\nThe `options` object accepts any of the following keys:\n\n#### defaultCharset\n\nSpecify the default character set for the text content if the charset is not specified in the `Content-Type` header of the request. Defaults to `utf-8`.\n\n#### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when `false`, deflated bodies are rejected. Defaults to `true`.\n\n#### limit\n\nControls the maximum request body size. If this is a number, then the value specifies the number of bytes; if it is a string, the value is passed to the [bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults to `'100kb'`.\n\n#### type\n\nThe expected `Content-Type` of the XML request to be parsed. Overrides the default content types, can be a String or Array of Strings.\n\n#### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`, where `buf` is a `Buffer` of the raw request body and `encoding` is the encoding of the request. The parsing can be aborted by throwing an error.\n\n#### xmlParseOptions\n\nThis option controls the behaviour of the XML parser. You can pass any option that is supported by the [xml2js](https://github.com/Leonidas-from-XIV/node-xml2js) library: [see here](https://github.com/Leonidas-from-XIV/node-xml2js#options) for a list of these options.\n\n## Example\n\n``` js\nvar express = require('express'),\n    bodyParser = require('body-parser');\n\nrequire('body-parser-xml')(bodyParser);\n\nvar app = express();\napp.use(bodyParser.xml({\n  limit: '1MB',   // Reject payload bigger than 1 MB\n  xmlParseOptions: {\n    normalize: true,     // Trim whitespace inside text nodes\n    normalizeTags: true, // Transform tags to lowercase\n    explicitArray: false // Only put nodes in array if >1\n  }\n}));\n\napp.post('/users', function(req, res, body) {\n  // Any request with an XML payload will be parsed\n  // and a JavaScript object produced on req.body\n  // corresponding to the request payload.\n  console.log(req.body);\n  res.status(200).end();\n});\n\n```\n\n## Motivation\n\nThis library was born out of a frustration that [express-xml-bodyparser](https://github.com/macedigital/express-xml-bodyparser), the most popular XML-parsing library for express, doesn't support the regular `body-parser` options - in particular, limiting the payload size.\n\nThis library was written to use `body-parser`'s text parser under the hood, and then passes the parsed string into the XML parser. We can therefore take advantage of `body-parser`'s regular options, and support limiting the payload size, amongst other things.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fiznool/body-parser-xml.git"
  },
  "scripts": {
    "test": "node_modules/mocha/bin/mocha test.js"
  },
  "version": "1.1.0"
}
